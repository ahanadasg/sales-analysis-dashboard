# -*- coding: utf-8 -*-
"""bfsa_d.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OhcskOeSi2sgr0ElHDqiYS0LhWRiA82J
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV file
@st.cache_data  # Use Streamlit's cache to load the data efficiently
def load_data():
    data = pd.read_csv("train.csv")
    return data

# Create a Streamlit app
def main():
    # Set the title and page layout
    st.title("Sales Analysis Dashboard")
    st.sidebar.title("Options")

    # Load the data
    data = load_data()

    # Display the first few rows of the Excel file
    st.write("#### | First Few Rows of Excel Data")
    st.dataframe(data.head())  # Display the first 5 rows by default

    #Quick Summary
    st.write("#### | Quick Summary")

    # Date Range Filter
    st.write("Date Range: **November, 2022**")
    

    # Display the total number of products sold
    total_products_sold = len(data["Product_ID"])
    st.write(f" Total Number of Products Sold: **{total_products_sold}**")

    # Calculate the sum of the "Purchase" column
    total_purchase = data["Purchase"].sum()
    # Display the total purchase amount
    st.write(f" Revenue Generated: **${total_purchase:,.2f}**")


  # Display a table with the best-selling products
    # Filter products with more than 1000 sales
    st.write("#### | Best Selling Products")
    high_sales_products = data["Product_ID"].value_counts().reset_index()
    high_sales_products.columns = ["Product_ID", "Quantity Sold"]
    high_sales_products = high_sales_products[high_sales_products["Quantity Sold"] > 1000]
    st.dataframe(high_sales_products)


# Display a histogram depicting revenue distribution among product categories
    st.write("#### | Revenue Distribution by Product Category (Histogram)")
    # Group data by Product_Category_1 and sum the Purchase values
    revenue_by_category = data.groupby("Product_Category_1")["Purchase"].sum().reset_index()
    # Create a histogram
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.hist(revenue_by_category["Purchase"], bins=20, edgecolor="k")
    ax.set_xlabel("Total Purchase Amount")
    ax.set_ylabel("Frequency")
    ax.set_title("Revenue Distribution by Product Category")
    st.pyplot(fig)


    # Display an age distribution chart using a pie chart
    st.write("#### | Age Distribution of Customers (Pie Chart)")
    # Calculate the age distribution
    age_distribution = data["Age"].value_counts().sort_index()
    # Create a pie chart
    fig, ax = plt.subplots()
    ax.pie(age_distribution, labels=age_distribution.index, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
    st.pyplot(fig)



    # Define occupation categories and their corresponding codes
    occupation_categories = {
        "Professor": 10,
        "Artist": 16,
        "Engineer": 15,
        "Retiree": 7,
        "Doctor": 20,
        "Office Worker": 9,
        "Homemaker": 1,
        "Lawyer": 12,
        "Self Employed": 17,
        "Student": 0,
        "Small Business Owner": 3,
        "Designer": 4,
        "Bartender": 11,
        "Entrepreneur": 8,
        "Freelancer": 19,
        "Investor": 2,
        "Journalist": 18,
        "Social Worker": 5,
        "Unemployed": 14,
        "Childcare Worker": 13,
        "Scientist": 6
    }

    # Create a dictionary to store counts for each category
    occupation_counts = {category: data[data["Occupation"] == code]["Occupation"].count() for category, code in occupation_categories.items()}
    # Display a bar chart depicting the distribution of occupation categories
    st.write("#### | Occupation Distribution(Bar Chart)")
    # Create a bar chart
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.bar(occupation_counts.keys(), occupation_counts.values())
    ax.set_xlabel("Occupation Category")
    ax.set_ylabel("Count")
    ax.set_title("Occupation Distribution")
    plt.xticks(rotation=45)  # Rotate x-axis labels for readability
    st.pyplot(fig)







    

if __name__ == "__main__":
    main()